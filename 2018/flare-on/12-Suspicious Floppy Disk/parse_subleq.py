# -*- coding:utf-8 -*-
import struct
addr_code = [0x0005,0x0009,0x000C,0x000F,0x0012,0x0015,0x0018,0x001B,0x001E,0x0021,
            0x0024,0x0027,0x002A,0x002D,0x0030,0x0033,0x0036,0x0039,0x003D,0x0040,
            0x0043,0x0046,0x004A,0x004D,0x0050,0x0053,0x0056,0x005A,0x005D,0x0060,
            0x0063,0x0066,0x0069,0x006C,0x006F,0x0072,0x0075,0x0078,0x007B,0x007E,
            0x0081,0x0084,0x0087,0x008A,0x008E,0x0091,0x0094,0x0097,0x009B,0x009E,
            0x00A1,0x00A4,0x00A7,0x00AB,0x00AE,0x00B1,0x00B4,0x00B7,0x00BA,0x00BD,
            0x00C0,0x00C3,0x00C6,0x00C9,0x00CC,0x00CF,0x00D2,0x00D5,0x00D8,0x00DB,
            0x00DF,0x00E2,0x00E5,0x00E8,0x00FC,0x0100,0x0103,0x0106,0x0109,0x010C,
            0x0110,0x0114,0x0118,0x011B,0x011E,0x0121,0x0124,0x0127,0x012A,0x012D,
            0x0130,0x0133,0x0136,0x0139,0x013C,0x013F,0x0142,0x0145,0x0149,0x014D,
            0x0151,0x0154,0x0157,0x015A,0x015D,0x0160,0x0163,0x0166,0x0169,0x016C,
            0x016F,0x0172,0x0175,0x0178,0x017B,0x017E,0x0182,0x0186,0x018A,0x018E,
            0x0192,0x0196,0x019A,0x019E,0x01A2,0x01A6,0x01AA,0x01AE,0x01B1,0x01B4,
            0x01B7,0x01BA,0x01BD,0x01C0,0x01C3,0x01C6,0x01C9,0x01CC,0x01CF,0x01D2,
            0x01D5,0x01D8,0x01DB,0x01DE,0x01E1,0x01E4,0x01E7,0x01EA,0x01ED,0x01F0,
            0x01F3,0x01F6,0x01F9,0x01FC,0x01FF,0x0202,0x0205,0x0208,0x0212,0x0215,
            0x0218,0x021B,0x021E,0x0221,0x0224,0x0227,0x022A,0x022D,0x0230,0x0233,
            0x0236,0x0239,0x023C,0x023F,0x0242,0x0248,0x024B,0x024E,0x0255,0x0258,
            0x025B,0x025E,0x0261,0x0264,0x0267,0x026A,0x026D,0x0270,0x0273,0x0276,
            0x0279,0x027C,0x027F,0x0282,0x0285,0x0289,0x028C,0x028F,0x0292,0x0296,
            0x0299,0x029C,0x029F,0x02A2,0x02A6,0x02A9,0x02AC,0x02AF,0x02B2,0x02B5,
            0x02B8,0x02BB,0x02BE,0x02C1,0x02C4,0x02C7,0x02CA,0x02CD,0x02D0,0x02D3,
            0x02D6,0x02DA,0x02DD,0x02E0,0x02E3,0x0520,0x0524,0x0527,0x052A,0x052D,
            0x0530,0x0534,0x0538,0x053C,0x053F,0x0542,0x0545,0x0548,0x054B,0x054E,
            0x0551,0x0554,0x0557,0x055A,0x055D,0x0560,0x0563,0x0566,0x0569,0x056C,
            0x056F,0x0572,0x0575,0x0578,0x057B,0x057E,0x0581,0x0584,0x0587,0x058A,
            0x058D,0x0590,0x0593,0x0596,0x0599,0x059C,0x059F,0x05A2,0x05A5,0x05A8,
            0x05AB,0x05AE,0x05B1,0x05B4,0x05B7,0x05BA,0x05BD,0x05C3,0x05C6,0x05C9,
            0x0638,0x063B,0x063E,0x0641,0x0644,0x0648,0x064B,0x064E,0x0651,0x0654,
            0x0657,0x065A,0x065D,0x0660,0x0663,0x0666,0x0669,0x066C,0x066F,0x0672,
            0x0675,0x0678,0x067B,0x067E,0x0681,0x0684,0x0687,0x068A,0x068D,0x0690,
            0x0693,0x0696,0x0699,0x069C,0x069F,0x06A2,0x06A5,0x06A8,0x06AB,0x06AE,
            0x06B1,0x06B4,0x06B7,0x06BA,0x06BD,0x06C1,0x06C4,0x06C7,0x06CA,0x06CD,
            0x06D0,0x06D3,0x06D6,0x06D9,0x06DC,0x06DF,0x06E2,0x06E5,0x06E8,0x06EB,
            0x06EE,0x06F1,0x06F4,0x06F7,0x06FA,0x06FD,0x0700,0x0703,0x0706,0x0709,
            0x070C,0x0715,0x071C,0x071F,0x0722,0x0725,0x0728,0x072B,0x072E,0x0731,
            0x0734,0x0737,0x073A,0x073D,0x0740,0x0743,0x0746,0x0749,0x074C,0x074F,
            0x0752,0x0755,0x0758,0x075B,0x075E,0x0761,0x0764,0x0767,0x076A,0x076D,
            0x0770,0x0773,0x0776,0x0779,0x077F,0x078F,0x0793,0x0796,0x0799,0x079C,
            0x079F,0x07A2,0x07A5,0x07A8,0x07AB,0x07AE,0x07B1,0x07B4,0x07B7,0x07BA,
            0x07BD,0x07C0,0x07C3,0x07C6,0x07C9,0x07CC,0x07D0,0x07D3,0x07D6,0x07D9,
            0x07DC,0x07DF,0x07E2,0x07E5,0x07E8,0x07EB,0x02E6,0x02E9,0x02ED,0x02F0,
            0x02F3,0x02F6,0x02F9,0x02FC,0x02FF,0x0302,0x0305,0x0308,0x030B,0x030E,
            0x0311,0x0314,0x0317,0x031A,0x031D,0x0320,0x0323,0x0326,0x0329,0x032C,
            0x0335,0x03E2,0x03E5,0x03E8,0x03EB,0x03EE,0x03F1,0x03F4,0x03F7,0x03FA,
            0x03FD,0x0400,0x0403,0x0406,0x0409,0x040C,0x040F,0x0412,0x0415,0x0418,
            0x041B,0x041E,0x0421,0x042A,0x04BF,0x070F,0x0712,0x0718,0x077C,0x0782,
            0x0786,0x0789,0x078C,0x05CD,0x05D0,0x05D3,0x05D6,0x05D9,0x05DD,0x05E0,
            0x05E3,0x05E6,0x05E9,0x05EC,0x05EF,0x05F2,0x05F5,0x05F8,0x05FB,0x05FE,
            0x0601,0x0604,0x0607,0x060A,0x060D,0x0610,0x0613,0x0616,0x061A,0x061D,
            0x0620,0x0623,0x0626,0x0629,0x062C,0x062F,0x0632,0x0635,0x032F,0x0332,
            0x0339,0x033C,0x033F,0x0342,0x0345,0x0348,0x034B,0x034E,0x0351,0x0354,
            0x0357,0x035A,0x035D,0x0360,0x0363,0x0366,0x0369,0x036C,0x036F,0x0372,
            0x0375,0x0378,0x037B,0x037E,0x0381,0x0384,0x0387,0x038A,0x038D,0x0390,
            0x0393,0x0396,0x0399,0x039C,0x039F,0x03A2,0x03A5,0x03A8,0x03AB,0x03AE,
            0x03B2,0x03B5,0x03B8,0x03BB,0x03BE,0x03C1,0x03C4,0x03C7,0x03CA,0x03CD,
            0x03D0,0x03D3,0x03D6,0x03D9,0x03DC,0x03DF,0x0251,0x04C2,0x04C5,0x04C8,
            0x04CB,0x04CE,0x04D1,0x04D4,0x04D7,0x04DA,0x04DD,0x04E0,0x04E3,0x04E6,
            0x04E9,0x04EC,0x04EF,0x04F2,0x04F5,0x04F8,0x04FB,0x04FE,0x0502,0x0505,
            0x0508,0x050B,0x050E,0x0511,0x0514,0x0517,0x051A,0x051D,0x00EB,0x00EE,
            0x00F2,0x020b,0x020e,0x042e,0x0431,0x0434,0x0437,0x043a,0x043d,0x0440,
            0x0443,0x0446,0x0449,0x044c,0x044f,0x0452,0x0455,0x0458,0x045b,0x045e,
            0x0461,0x0464,0x0467,0x046a,0x046e,0x0471,0x0474,0x0477,0x047a,0x047d,
            0x0480,0x0483,0x0486,0x0489,0x048c,0x048f,0x0492,0x0495,0x0498,0x049b,
            0x049e,0x04a1,0x04a4,0x04a7,0x04aa,0x04ad,0x04b0,0x04b3,0x04b6,0x04b9,
            0x04bc,0x04bf]
addr_var = [0x0000,0x0001,0x0002,0x0003,0x0004,0x0008,0x003C,0x0049,0x0059,0x008D,
            0x009A,0x00AA,0x00DE,0x00F1,0x00F5,0x00F6,0x00F7,0x00F8,0x00F9,0x00FA,
            0x00FB,0x00FF,0x010F,0x0113,0x0117,0x0148,0x014C,0x0150,0x0181,0x0185,
            0x0189,0x018D,0x0191,0x0195,0x0199,0x019D,0x01A1,0x01A5,0x01A9,0x01AD,
            0x0211,0x0245,0x0246,0x0247,0x0254,0x0288,0x0295,0x02A5,0x02D9,0x02EC,
            0x0338,0x03B1,0x0424,0x0425,0x0426,0x0427,0x0428,0x0429,0x042D,0x046D,
            0x0501,0x0523,0x0533,0x0537,0x053B,0x05C0,0x05C1,0x05C2,0x05CC,0x05DC,
            0x0619,0x0647,0x06C0,0x071B,0x0785,0x0792,0x07CF,0x07EE,0x07EF,0x07F0,
            0x07F1,0x07F2,0x07F3,0x07F4,0x07F5,0x07F6,0x07F7,0x07F8,0x07F9,0x07FA,
            0x07FB,0x07FC]

def load_data():
  fp = open('tmp_ori.dat','rb')
  tmp = fp.read(0x2dad*2)
  fp.close()      
  d = list(struct.unpack('11693H',tmp[:0x2dad*2]))
  return d
  
def get_var_addr(): 
  addr_l = []
  addr_var = []
  for i in addr_code:
    addr_l += [i+x for x in range(3)]
  print addr_l
  for i in range(0x7fd):
    if i not in addr_l:
      addr_var.append(i)
  text = ''
  for i in addr_var:
    text += '0x{:04X},'.format(i)
  print text[:-1]

def var_parse(data):
  t = ''
  for i in addr_var:
    t += 'var_{:04X} = {:04X}\r'.format(i,data[i])
  return t
  
def mode_parse(idx,data):
  if  data[idx] == data[idx+1] and data[idx+2] == 0 and data[idx] == idx+0x24:
    if data[idx+3] != 0 and data[idx+4] == 0 and data[idx+5] == 0:
      if data[idx+6] == 0 and data[idx+8] == 0 and data[idx+7] == data[idx]:
        if data[idx+9] == 0 and data[idx+10] ==0 and data[idx+11] == 0:
          
          if data[idx+12] == data[idx+13] and data[idx+14] == 0 and data[idx+12] == idx+0x25:
            if data[idx+15] == data[idx+3]  and data[idx+16] == 0 and data[idx+17] == 0:
              if data[idx+18] == 0 and data[idx+20] == 0 and data[idx+19] == data[idx+12]:
                if data[idx+21] == 0 and data[idx+22] ==0 and data[idx+23] == 0:
                  
                  if data[idx+24] == data[idx+25] and data[idx+26] == 0 and data[idx+24] == idx+0x2b:
                    if data[idx+27] == data[idx+3]  and data[idx+28] == 0 and data[idx+29] == 0:
                      if data[idx+30] == 0 and data[idx+32] == 0 and data[idx+31] == data[idx+24]:
                        if data[idx+33] == 0 and data[idx+34] ==0 and data[idx+35] == 0:
                          
                          if data[idx+36] == 0 and data[idx+37] == 0 and data[idx+38] == 0 :
                            if data[idx+39] != 0 and  data[idx+40] == 0 and data[idx+41] == 0:
                              if data[idx+42] == 0 and data[idx+43] == 0 and data[idx+44] == 0:
                                if data[idx+45] == 0 and data[idx+46] ==0 and data[idx+47] == 0:
                                  str = 'loc_{:04X}: MOV [[var_{:04X}]],[var_{:04X}]\r'.format(idx,data[idx+3],data[idx+39])
                                  return str,16
  if  data[idx] == data[idx+1] and data[idx+2] == 0 and data[idx] == idx+0xf:
    if data[idx+3] != 0 and data[idx+4] == 0 and data[idx+5] == 0:
      if data[idx+6] == 0 and data[idx+8] == 0 and data[idx+7] == data[idx]:
        if data[idx+9] == 0 and data[idx+10] ==0 and data[idx+11] == 0:
          
          if data[idx+12] == data[idx+13] and data[idx+12] == idx+0x1a and data[idx+14] == 0 :
            if data[idx+15] == 0  and data[idx+16] == 0 and data[idx+17] == 0:
              if data[idx+18] == 0 and data[idx+20] == 0 and data[idx+19] == data[idx+12]:
                if data[idx+21] == 0 and data[idx+22] ==0 and data[idx+23] == 0:
                  
                  if data[idx+24] == 0 and data[idx+25] ==0 and data[idx+26] == 0:
                    str = 'loc_{:04X}: JMP [[var_{:04X}]]\r'.format(idx,data[idx+3])
                    return str,9
                  
  if  data[idx] == data[idx+1] and data[idx+2] == 0 and data[idx] == idx+0xf:
    if data[idx+3] != 0 and data[idx+4] == 0 and data[idx+5] == 0:
      if data[idx+6] == 0 and data[idx+8] == 0 and data[idx+7] == data[idx]:
        if data[idx+9] == 0 and data[idx+10] ==0 and data[idx+11] == 0:
          
          if data[idx+12] == data[idx+13] and data[idx+14] == 0 :
            if data[idx+15] == 0  and data[idx+16] == 0 and data[idx+17] == 0:
              if data[idx+18] == 0 and data[idx+20] == 0 and data[idx+19] == data[idx+12]:
                if data[idx+21] == 0 and data[idx+22] ==0 and data[idx+23] == 0:
                  str = 'loc_{:04X}: MOV [var_{:04X}],[[var_{:04X}]]\r'.format(idx,data[idx+12],data[idx+3])
                  return str,8
                                  
  if data[idx] != 0 and data[idx] == data[idx+1] and data[idx+2] == 0:
    if data[idx+3] != 0 and data[idx+4] == 0 and data[idx+5] == 0:
      if data[idx+6] == 0 and data[idx+8] == 0 and data[idx+7] == data[idx]:
        if data[idx+9] == 0 and data[idx+10] ==0 and data[idx+11] == 0:
          str = 'loc_{:04X}: MOV [var_{:04X}],[var_{:04X}]\r'.format(idx,data[idx],data[idx+3])
          return str,4
  if data[idx] != 0 and data[idx+1] == 0 and data[idx+2] == 0:
    if data[idx+3] == 0 and data[idx+4] !=0 and data[idx+4] != data[idx] and data[idx+5] == 0:
      if data[idx+6] == 0 and data[idx+7] == 0 and data[idx+8] == 0:
        str = 'loc_{:04X}: ADD [var_{:04X}],[var_{:04X}]\r'.format(idx,data[idx+4],data[idx])
        return str,3
  if data[idx] != 0 and data[idx+1] == 0 and data[idx+2] ==  idx+6:
    if data[idx+3] == 0 and data[idx+4] == 0 and data[idx+5] == idx+12:
      if data[idx+6] == 0 and data[idx+7] == 0 and data[idx+8] == 0:
        if data[idx+9] == 0 and data[idx+10] == data[idx] and  data[idx+11] != 0:
          str = 'loc_{:04X}: TEST [var_{:04X}] \r\t\tJE loc_{:04X}\r'.format(idx,data[idx],data[idx+11])
          return str,4
  if data[idx] == 0 and data[idx+1] == 0 and data[idx+2] != 0:
    str = 'loc_{:04X}: JMP loc_{:04X}\r'.format(idx,data[idx+2])
    return str,1
  if data[idx] != 0 and data[idx+1] != 0 and data[idx+2] == 0:
    str = 'loc_{:04X}: SUB [var_{:04X}],[var_{:04X}]\r'.format(idx,data[idx+1],data[idx])
    return str,1
  if data[idx] != 0 and data[idx+1] == 0 and data[idx+2] != 0:
    str = 'loc_{:04X}: CMP [var_{:04X}]\n\t\tJGE loc_{:04X}\r'.format(idx,data[idx],data[idx+2])
    return str,1
  return '',0

def ins_parse(data):
  t = ''
  addr_code_c = list(addr_code)
  for i in addr_code:
    if i in addr_code_c:
      s,n = mode_parse(i,data)
      if n > 0:
        t += s
        for j in xrange(n):
          try:
            addr_code_c.remove(i+3*j)
          except:
            print '{:04X}'.format(i+3*j)
      else:
        t += 'loc_{:04X}: {:04X} {:04X} {:04X}\r'.format(i,data[i],data[i+1],data[i+2])
        addr_code_c.remove(i)
  return t
def main():
#  get_var_addr()
  addr_code.sort()
  data = load_data()
  text = var_parse(data)
  text += ins_parse(data)
  with open('ins1.txt','w') as fp:
    fp.write(text)
  
  print 'end.'

if __name__ == '__main__':
  main()