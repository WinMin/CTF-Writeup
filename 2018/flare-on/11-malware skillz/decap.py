# -*- coding:utf-8 -*-
import sys
import pyshark
from Crypto.Cipher import ARC4
def decodecap():
  cap = pyshark.FileCapture('pcap1.pcap',display_filter="dns")
  s = ''
  try:
    for pkt in cap:
      if pkt.dns.flags_response == '1' and pkt.ip.dst == '192.168.221.91':
        s += pkt.dns.txt
  except:
    pass
  out = ''
  for i in range(len(s)/2):
    out += chr(ord(s[2*i])-0x41+16*(ord(s[2*i+1])-0x61))
  with open('capout','wb') as fp:
    fp.write(out)
    
def decodecaptcp():
  cap = pyshark.FileCapture('pcap_tcp.pcap',display_filter="tcp")
  s = ''
  try:
    for pkt in cap:
      di = ''
      idx = 0
      if int(pkt.length) >66 and 'data' in pkt.__dir__():
        if pkt.tcp.port == '9443':
          di = 'r'
        else:
          di = 't'
        idx = int(pkt.number)
        with open('tcp\{:03d}{}.bin'.format(idx,di),'wb') as fp:
          fp.write(pkt.data.data.decode('hex'))
  except:
    pass
    
def KSA(key):
    keylength = len(key)

    S = range(255)

    j = 0
    for i in range(255):
        j = (j + S[i] + key[i % keylength]) % 255
        S[i], S[j] = S[j], S[i]  # swap

    return S

def PRGA(S):
    i = 0
    j = 0
    while True:
        i = (i + 1) % 255
        j = (j + S[i]) % 255
        S[i], S[j] = S[j], S[i]  # swap

        K = S[(S[i] + S[j]) % 255]
        yield K

def RC4(key):
    S = KSA(key)
    return PRGA(S)
    
def derc4():
  data = file('capout','rb').read()
  key = data[:16]
  s = ''  
  key = [ord(i) for i in key]
  keystream = RC4(key)
  for i in data[20:]:
    s += chr(ord(i) ^ keystream.next())  
  with open('capout_de_ori','wb') as fp:
    fp.write(s)
    
def main():
#  decodecap()
#  derc4()
  decodecaptcp()
  print 'end.'

if __name__ == '__main__':
  reload(sys)
  sys.setdefaultencoding('utf8')
  main()